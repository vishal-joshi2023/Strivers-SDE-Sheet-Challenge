#include <bits/stdc++.h>
class LRUCache {
public:

    //create doubly linkedlist 
    class node{
      public:
      
        int key,val;
        node *next , *pre;
        
        node(int k,int v){
          key = k ; 
          val = v; 
        }
    };

    //fill haed tail = dummy val 
    node *head = new node(-1,-1);
    node *tail = new node(-1,-1);

    int cap;
    unordered_map<int , node*> mp; 


    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->pre = head;
    }
    
    int get(int k) {
        
        if(mp.find(k)!=mp.end()){
          
          node *temp = mp[k];
          int ans = temp->val;

          //removal
          mp.erase(k);
          deleteNode(temp);
          
          //reinsertion
          addNode(temp);//into list
          mp[k] = head->next; //into map
 
          return ans;
        }
        return -1;
    }
    
    void put(int k, int v) {
         if(mp.find(k)!=mp.end()){
          node *temp = mp[k];
          
          //removal
          mp.erase(k);
          deleteNode(temp);
         }

        if(mp.size()==cap){
          mp.erase(tail->pre->key);
          deleteNode(tail->pre);
        }

        //insertion
        node *newNode =  new node(k,v) ;
        addNode(newNode);
        mp[k] = head->next;
    }

    void addNode(node* newNode){
        
        newNode->next = head->next;
        newNode->pre  = head;
        head->next->pre = newNode;
        head->next = newNode;
    }
    void deleteNode(node* delNode){
        delNode->pre->next = delNode->next;
        delNode->next->pre = delNode->pre;
    }
};
 /*
 get item -> if HIT :
                     -> delete Node from map & doublylist
                     -> insert Node again into list after headNode 
                     -> and insert node in map with new address
             if Fault : return -1;

 put item -> *if page not full :
             -> insert Node into DLlist right after headNode                     
             -> and insert node in map with  address
             *if page full :
             -> delete node right befor tailNode
             -> also from map
             -> follow page not full
             *if already present -> follow get item
 add / delete node fun          
*/
