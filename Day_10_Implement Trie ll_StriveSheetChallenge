#include <bits/stdc++.h> 

struct Node{
    Node *links[26];
    int endCount=0;
    int prefixCount=0;

    //check if exist or not
    bool ifExists(char c){
        return links[c-'a']!=NULL;
    }
    
    //insert
    void put(char ch , Node *node){
        links[ch-'a'] = node;
    }
    
    //if exist return node
    Node *getNextNode(char ch){
      return  links[ch-'a'];
    }

    void incPrefix(){  prefixCount++ ;}

    void incEnd() { endCount++ ;}

    int getEnd() { return endCount;}

    int getPrefix() { return  prefixCount;}

    void eraseEachCnt() {  prefixCount-- ;}

    void eraseEnd(){ endCount -- ;}

};
class Trie{

   Node *root;
    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        
       Node *node = root;
       
       for(char ch : word){
           if(!node->ifExists(ch)){
               node->put(ch,new Node());
           }
           node = node->getNextNode(ch);
           node-> incPrefix();
       }
       node->incEnd();
    }

    int countWordsEqualTo(string &word){
      Node *node = root;
       
       for(char ch : word){
           if(!node->ifExists(ch))
               return 0;
           node = node->getNextNode(ch);
       }
       return node->getEnd();
    }

    int countWordsStartingWith(string &word){
        Node *node = root;
       
       for(char ch : word){
           if(!node->ifExists(ch))
               return 0;
           node = node->getNextNode(ch);
       }
       return node->getPrefix();
    }

    void erase(string &word){
     Node *node = root;
       
       for(char ch : word){
           if(!node->ifExists(ch))
               return;
           node = node->getNextNode(ch);
           node-> eraseEachCnt();
       }
       node->eraseEnd();
    }
};
