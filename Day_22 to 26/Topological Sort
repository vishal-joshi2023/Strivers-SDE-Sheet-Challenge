#include <bits/stdc++.h>
//dfs approach
void dfs(vector<int>adj[],vector<int>&visted,int node,stack<int>&st)
{
   visted[node]=1;
   for(auto it:adj[node])
   {
        if(!visted[it])
        {
            dfs(adj,visted,it,st);
        }
   }
   st.push(node);
} 


vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e) {
    //dfs approach
    // vector<int>adj[v];
    // for(auto it:edges)
    // {
    //     int u=it[0];
    //     int v=it[1];
    //     adj[u].push_back(v);
    // }
    // vector<int>visted(v+1,0);
    // stack<int>st;
    // for(int i=0;i<v;i++)
    // {
    //     if(!visted[i])
    //     {
    //         dfs(adj,visted,i,st);
    //     }
    // }
    // vector<int>ans;
    // while(!st.empty())
    // {
    //    int node=st.top();
    //    ans.push_back(node);
    //    st.pop();
    // }
    // return ans;
    
    //bfs approach (kahns algorithm)
    vector<int>adj[v];
    for(auto it:edges)
    {
        int u=it[0];
        int v=it[1];
        adj[u].push_back(v);
    }
    vector<int>degree(v+1,0);
    for(auto i:adj)
    {
        for(auto it:i)
        {
            degree[it]++;
        }
    }
    queue<int>q;
    for(int i=0;i<v;i++)
    {
        if(degree[i]==0)
        {
            q.push(i);
        }
    }
    vector<int>ans;
    while(!q.empty())
    {
        auto p=q.front();
        q.pop();
        ans.push_back(p);
        for(auto it:adj[p])
        {
            degree[it]--;
            if(degree[it]==0)
            {
                q.push(it);
            }
        }
    }
    return ans;
}
