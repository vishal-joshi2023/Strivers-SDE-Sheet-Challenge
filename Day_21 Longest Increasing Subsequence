
#include <bits/stdc++.h>
int fun(int arr[],int i,int pre,int n,vector<vector<int>> &dp){
    if(i==n){
        return 0;
    }

    if(dp[i][pre+1]!=-1) return dp[i][pre+1];
 
    int pick=0;
    if(pre==-1 | arr[i]>arr[pre]) 
     pick = 1+fun(arr,i+1,i,n,dp); 

    int notPick = fun(arr,i+1,pre,n,dp);
    
    return dp[i][pre+1] = max(pick,notPick); 
}
int longestIncreasingSubsequence(int nums[], int n)

{


     
   // vector<vector<int>> dp(n,vector<int>(n+1,-1));

   // return fun(nums,0,-1,n,dp);

vector<int> dp;
      dp.push_back(nums[0]);

      for(int i=1;i<n;i++){
         if(nums[i]>dp.back()) {
           dp.push_back(nums[i]); 
           continue; 
         }

         int ind = lower_bound(dp.begin(),dp.end(),nums[i]) - dp.begin();
         dp[ind] = nums[i];
       }
       return dp.size();


//    vector<int> nums;
//    for(int i=0;i<n;i++) nums.push_back(arr[i]);
   
//         int mx = *max_element(begin(nums),end(nums));
//         mx+=1;
        
//         vector<int> dp(nums.size(),mx);
        
//         for(int i:nums)
//         {
//             for(int &j:dp)
//             {
//                 if(j>=i)
//                 {
//                     j=i;
//                     break;
//                 }
//             }
//         }
        
        
//         int count=0;
//         for(int i:dp){
//             if(i==mx)
//                 return count;
//                 count++;}
        
//         return count; 
 
        // vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        
        // for(int i=n-1;i>=0;i--){
        //   for(int pre=i-1; pre>=-1 ; pre--){
        //      //not pick
        //      int len = dp[i+1][pre+1];
        //      if(pre==-1 | nums[i]>nums[pre])
        //        len = max(len , 1+dp[i+1][i+1]);

        //      dp[i][pre+1] = len;  
        //   }
        // }
        //return dp[0][0]; //[0][-1+1];


}
