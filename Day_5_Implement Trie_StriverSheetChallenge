/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct Node{
    Node *links[26];
    bool flag = false;

    bool isContains(char &ch){
       return links[ch-'a'];  
    }

    Node* get(char &ch){
        return links[ch-'a'];
    }

    void put(char &ch , Node* node){
        links[ch-'a'] = node;
    }

    void setEnd(){
        flag = true;
    }

    bool isEnd(){
        return flag;
    }
};


class Trie {

    Node* root;  
public:
     
    /** Initialize your data structure here. */
    Trie() {
       root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
       
       Node* node = root;
       for(char &ch:word){
           if(!node->isContains(ch)){
               node->put(ch, new Node());
           }
           node = node->get(ch);
       }
       node->setEnd();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {

       Node* node = root;

       for(char &ch:word){
           if(!node->isContains(ch)){
               return false;
           }
           node = node->get(ch);
       }
       node->isEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {

       Node* node = root;

       for(char &ch:prefix){
           if(!node->isContains(ch)){
               return false;
           }
           node = node->get(ch);
       }

       return true;
    }
};
